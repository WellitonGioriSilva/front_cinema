@using MudBlazor
@using front_cinema.Client.Models
@using System.Net.Http.Json;
@using Microsoft.AspNetCore.WebUtilities
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IConfiguration Configuration
@inject HttpClient _http

<MudDialog>
    <DialogContent>
        @* <MudTextField T="string" Variant="Variant.Outlined" Label="Data" TextChanged="OnChangeSearch"
        Immediate="true" /> *@
        <MudTable Items="_sessoes" Hover="true" Bordered="true">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Data</MudTh>
                <MudTh>Hora</MudTh>
                <MudTh>Valor</MudTh>
                <MudTh>Meia</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.Data.ToString("dd/MM/yyyy")</MudTd>
                <MudTd>@context.Hora</MudTd>
                <MudTd>@context.Valor.ToString("C2")</MudTd>
                <MudTd>@(context.Meia == true ? "Sim" : "Não")</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary" Size="Size.Small" OnClick="@(() => Selected(context))">
                        Selecionar
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        @* <MudButton OnClick="() => MudDialog.Cancel()">Cancelar</MudButton> *@
    </DialogActions>
</MudDialog>

@code {
    @* Parâmetros para filtro *@
    [Parameter]
    public int IdFilme { get; set; }
    @* public string Nome { get; set; } *@
    int _id = 0;
    string _nome = null;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    @* Inicializa lista de sessoes *@
    List<Sessao> _sessoes = new List<Sessao>();

    protected override async Task OnInitializedAsync()
    {
        await GetSessoesAsync();
    }

    @* Seleciona o Sessao - Colocar try catch*@
    void Selected(Sessao sessao)
    {
        MudDialog.Close(DialogResult.Ok<Sessao>(sessao));
    }

    @* Chama Api *@
    async Task<List<Sessao>> GetSessoesAsync()
    {
        try
        {
            var baseUrl = Configuration.GetValue<string>("apiBaseUrl");
            var queryParams = new Dictionary<string, string>
{
{ "id", _id.ToString() }
};
            if (IdFilme != 0 && IdFilme != null)
            {
                queryParams.Add("id_filme_fk", IdFilme.ToString());
            }
            var url = QueryHelpers.AddQueryString($"{baseUrl}/sessao", queryParams);
            _sessoes = await _http.GetFromJsonAsync<List<Sessao>>($"{url}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        return _sessoes;
    }

    @* Ao alterar texto de busca - Colocar try catch *@
    private async Task OnChangeSearch(string value)
    {
        _nome = value;
        await GetSessoesAsync();
    }
}
