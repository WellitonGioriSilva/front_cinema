@using MudBlazor
@using front_cinema.Client.Models
@using System.Net.Http.Json;
@using Microsoft.AspNetCore.WebUtilities
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IConfiguration Configuration
@inject HttpClient _http

<MudDialog>
    <DialogContent>
        <MudTextField T="string" Variant="Variant.Outlined" Label="Nome" TextChanged="OnChangeSearch"
            Immediate="true" />
        <MudTable Items="_filmes" Hover="true" Bordered="true">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Nome</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.Nome</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary" Size="Size.Small" OnClick="@(() => Selected(context))">
                        Selecionar
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        @* <MudButton OnClick="() => MudDialog.Cancel()">Cancelar</MudButton> *@
    </DialogActions>
</MudDialog>

@code {
    @* Par√¢metros para filtro *@
    @* [Parameter] *@
    @* public int Id { get; set; } *@
    @* public string Nome { get; set; } *@
    int _id = 0;
    string _nome = null;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    @* Inicializa lista de filmes *@
    List<Filme> _filmes = new List<Filme>();

    protected override async Task OnInitializedAsync()
    {
        await GetFilmesAsync();
    }

    @* Seleciona o Filme *@
    void Selected(Filme filme)
    {
        MudDialog.Close(DialogResult.Ok<Filme>(filme));
    }

    @* Chama Api *@
    async Task<List<Filme>> GetFilmesAsync()
    {
        var baseUrl = Configuration.GetValue<string>("apiBaseUrl");
        var queryParams = new Dictionary<string, string>
{
{ "id", _id.ToString() }
};
        if (!string.IsNullOrWhiteSpace(_nome))
        {
            queryParams.Add("nome", _nome);
        }
        var url = QueryHelpers.AddQueryString($"{baseUrl}/filme", queryParams);
        _filmes = await _http.GetFromJsonAsync<List<Filme>>($"{url}");
        return _filmes;
    }

    @* Ao alterar texto de busca *@
    private async Task OnChangeSearch(string value)
    {
        _nome = value;
        await GetFilmesAsync();
    }
}
